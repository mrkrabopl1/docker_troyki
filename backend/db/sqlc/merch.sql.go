// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: merch.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCointIdByName = `-- name: GetCointIdByName :many
SELECT firm,
    COUNT(id) count
FROM snickers
WHERE name ILIKE '%' || CAST($1 AS text) || '%'
GROUP BY $1
`

type GetCointIdByNameRow struct {
	Firm  string `json:"firm"`
	Count int64  `json:"count"`
}

func (q *Queries) GetCointIdByName(ctx context.Context, dollar_1 string) ([]GetCointIdByNameRow, error) {
	rows, err := q.db.Query(ctx, getCointIdByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCointIdByNameRow
	for rows.Next() {
		var i GetCointIdByNameRow
		if err := rows.Scan(&i.Firm, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollections = `-- name: GetCollections :many
SELECT COALESCE(discount.minprice, snickers.minprice) AS minprice,
    snickers.id,
    image_path,
    name,
    firm,
    maxdiscprice
FROM snickers
    LEFT JOIN discount ON snickers.id = productid
WHERE firm = ANY(CAST($1 AS text []))
    OR line = $2
LIMIT $3 OFFSET $4
`

type GetCollectionsParams struct {
	Column1 []string `json:"column_1"`
	Line    string   `json:"line"`
	Limit   int32    `json:"limit"`
	Offset  int32    `json:"offset"`
}

type GetCollectionsRow struct {
	Minprice     int32       `json:"minprice"`
	ID           int32       `json:"id"`
	ImagePath    string      `json:"image_path"`
	Name         string      `json:"name"`
	Firm         string      `json:"firm"`
	Maxdiscprice pgtype.Int4 `json:"maxdiscprice"`
}

func (q *Queries) GetCollections(ctx context.Context, arg GetCollectionsParams) ([]GetCollectionsRow, error) {
	rows, err := q.db.Query(ctx, getCollections,
		arg.Column1,
		arg.Line,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCollectionsRow
	for rows.Next() {
		var i GetCollectionsRow
		if err := rows.Scan(
			&i.Minprice,
			&i.ID,
			&i.ImagePath,
			&i.Name,
			&i.Firm,
			&i.Maxdiscprice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFiltersByString = `-- name: GetFiltersByString :many
SELECT MIN(minprice) min,
    MAX(maxprice) max,
    COUNT("3.5") name_data2,
    COUNT("4") name_data3,
    COUNT("4.5") name_data4,
    COUNT("5") name_data5,
    COUNT("5.5") name_data6,
    COUNT("6") name_data7,
    COUNT("6.5") name_data8,
    COUNT("7") name_data9,
    COUNT("7.5") name_data10,
    COUNT("8") name_data11,
    COUNT("8.5") name_data12,
    COUNT("9") name_data13,
    COUNT("9.5") name_data163,
    COUNT("10") name_data14,
    COUNT("10.5") name_data15,
    COUNT("11") name_data16,
    COUNT("11.5") name_data17,
    COUNT("12") name_data18,
    COUNT("12.5") name_data19,
    COUNT("13") name_data20
FROM snickers
WHERE name ILIKE '%' || CAST($1 AS text) || '%'
`

type GetFiltersByStringRow struct {
	Min         interface{} `json:"min"`
	Max         interface{} `json:"max"`
	NameData2   int64       `json:"name_data2"`
	NameData3   int64       `json:"name_data3"`
	NameData4   int64       `json:"name_data4"`
	NameData5   int64       `json:"name_data5"`
	NameData6   int64       `json:"name_data6"`
	NameData7   int64       `json:"name_data7"`
	NameData8   int64       `json:"name_data8"`
	NameData9   int64       `json:"name_data9"`
	NameData10  int64       `json:"name_data10"`
	NameData11  int64       `json:"name_data11"`
	NameData12  int64       `json:"name_data12"`
	NameData13  int64       `json:"name_data13"`
	NameData163 int64       `json:"name_data163"`
	NameData14  int64       `json:"name_data14"`
	NameData15  int64       `json:"name_data15"`
	NameData16  int64       `json:"name_data16"`
	NameData17  int64       `json:"name_data17"`
	NameData18  int64       `json:"name_data18"`
	NameData19  int64       `json:"name_data19"`
	NameData20  int64       `json:"name_data20"`
}

func (q *Queries) GetFiltersByString(ctx context.Context, dollar_1 string) ([]GetFiltersByStringRow, error) {
	rows, err := q.db.Query(ctx, getFiltersByString, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFiltersByStringRow
	for rows.Next() {
		var i GetFiltersByStringRow
		if err := rows.Scan(
			&i.Min,
			&i.Max,
			&i.NameData2,
			&i.NameData3,
			&i.NameData4,
			&i.NameData5,
			&i.NameData6,
			&i.NameData7,
			&i.NameData8,
			&i.NameData9,
			&i.NameData10,
			&i.NameData11,
			&i.NameData12,
			&i.NameData13,
			&i.NameData163,
			&i.NameData14,
			&i.NameData15,
			&i.NameData16,
			&i.NameData17,
			&i.NameData18,
			&i.NameData19,
			&i.NameData20,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFirms = `-- name: GetFirms :many
SELECT firm,
    array_agg(DISTINCT line) AS array_of_data
FROM "snickers"
GROUP BY firm
`

type GetFirmsRow struct {
	Firm        string      `json:"firm"`
	ArrayOfData interface{} `json:"array_of_data"`
}

func (q *Queries) GetFirms(ctx context.Context) ([]GetFirmsRow, error) {
	rows, err := q.db.Query(ctx, getFirms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFirmsRow
	for rows.Next() {
		var i GetFirmsRow
		if err := rows.Scan(&i.Firm, &i.ArrayOfData); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnickersByFirmName = `-- name: GetSnickersByFirmName :many
SELECT name,
    image_path,
    snickers.id,
    value
FROM snickers
    LEFT JOIN discount ON snickers.id = productid
WHERE firm = $1
`

type GetSnickersByFirmNameRow struct {
	Name      string `json:"name"`
	ImagePath string `json:"image_path"`
	ID        int32  `json:"id"`
	Value     []byte `json:"value"`
}

func (q *Queries) GetSnickersByFirmName(ctx context.Context, firm string) ([]GetSnickersByFirmNameRow, error) {
	rows, err := q.db.Query(ctx, getSnickersByFirmName, firm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSnickersByFirmNameRow
	for rows.Next() {
		var i GetSnickersByFirmNameRow
		if err := rows.Scan(
			&i.Name,
			&i.ImagePath,
			&i.ID,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnickersByIds = `-- name: GetSnickersByIds :many
SELECT snickers.minPrice,
    snickers.id,
    image_path,
    name,
    firm,
    maxdiscprice
FROM snickers
    LEFT JOIN discount ON snickers.id = productid
WHERE snickers.id = ANY($1)
`

type GetSnickersByIdsRow struct {
	Minprice     int32       `json:"minprice"`
	ID           int32       `json:"id"`
	ImagePath    string      `json:"image_path"`
	Name         string      `json:"name"`
	Firm         string      `json:"firm"`
	Maxdiscprice pgtype.Int4 `json:"maxdiscprice"`
}

func (q *Queries) GetSnickersByIds(ctx context.Context, id int32) ([]GetSnickersByIdsRow, error) {
	rows, err := q.db.Query(ctx, getSnickersByIds, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSnickersByIdsRow
	for rows.Next() {
		var i GetSnickersByIdsRow
		if err := rows.Scan(
			&i.Minprice,
			&i.ID,
			&i.ImagePath,
			&i.Name,
			&i.Firm,
			&i.Maxdiscprice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnickersByLineName = `-- name: GetSnickersByLineName :many
SELECT line,
    array_agg(id) AS id,
    array_agg(image_path) AS image_path,
    array_agg(name) AS name_data
FROM snickers
WHERE line = $1
GROUP BY line
`

type GetSnickersByLineNameRow struct {
	Line      string      `json:"line"`
	ID        interface{} `json:"id"`
	ImagePath interface{} `json:"image_path"`
	NameData  interface{} `json:"name_data"`
}

func (q *Queries) GetSnickersByLineName(ctx context.Context, line string) ([]GetSnickersByLineNameRow, error) {
	rows, err := q.db.Query(ctx, getSnickersByLineName, line)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSnickersByLineNameRow
	for rows.Next() {
		var i GetSnickersByLineNameRow
		if err := rows.Scan(
			&i.Line,
			&i.ID,
			&i.ImagePath,
			&i.NameData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnickersByName = `-- name: GetSnickersByName :many
SELECT snickers.minPrice,
    snickers.id,
    image_path,
    name,
    firm,
    maxdiscprice
FROM snickers
    LEFT JOIN discount ON snickers.id = productid
WHERE name ILIKE '%' || $1::text || '%'
LIMIT $2
`

type GetSnickersByNameParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
}

type GetSnickersByNameRow struct {
	Minprice     int32       `json:"minprice"`
	ID           int32       `json:"id"`
	ImagePath    string      `json:"image_path"`
	Name         string      `json:"name"`
	Firm         string      `json:"firm"`
	Maxdiscprice pgtype.Int4 `json:"maxdiscprice"`
}

func (q *Queries) GetSnickersByName(ctx context.Context, arg GetSnickersByNameParams) ([]GetSnickersByNameRow, error) {
	rows, err := q.db.Query(ctx, getSnickersByName, arg.Column1, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSnickersByNameRow
	for rows.Next() {
		var i GetSnickersByNameRow
		if err := rows.Scan(
			&i.Minprice,
			&i.ID,
			&i.ImagePath,
			&i.Name,
			&i.Firm,
			&i.Maxdiscprice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnickersInfoById = `-- name: GetSnickersInfoById :one
SELECT info,
    image_path,
    name,
    value
FROM snickers
    LEFT JOIN discount ON snickers.id = productid
WHERE snickers.id = $1
`

type GetSnickersInfoByIdRow struct {
	Info      []byte `json:"info"`
	ImagePath string `json:"image_path"`
	Name      string `json:"name"`
	Value     []byte `json:"value"`
}

func (q *Queries) GetSnickersInfoById(ctx context.Context, id int32) (GetSnickersInfoByIdRow, error) {
	row := q.db.QueryRow(ctx, getSnickersInfoById, id)
	var i GetSnickersInfoByIdRow
	err := row.Scan(
		&i.Info,
		&i.ImagePath,
		&i.Name,
		&i.Value,
	)
	return i, err
}

const getSoloCollection = `-- name: GetSoloCollection :many
SELECT COALESCE(discount.minprice, snickers.minprice) AS minprice,
    snickers.id,
    image_path,
    name,
    firm,
    maxdiscprice
FROM snickers
    LEFT JOIN discount ON snickers.id = productid
WHERE firm = $1
    OR line = $2
LIMIT $3 OFFSET $4
`

type GetSoloCollectionParams struct {
	Firm   string `json:"firm"`
	Line   string `json:"line"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetSoloCollectionRow struct {
	Minprice     int32       `json:"minprice"`
	ID           int32       `json:"id"`
	ImagePath    string      `json:"image_path"`
	Name         string      `json:"name"`
	Firm         string      `json:"firm"`
	Maxdiscprice pgtype.Int4 `json:"maxdiscprice"`
}

func (q *Queries) GetSoloCollection(ctx context.Context, arg GetSoloCollectionParams) ([]GetSoloCollectionRow, error) {
	rows, err := q.db.Query(ctx, getSoloCollection,
		arg.Firm,
		arg.Line,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSoloCollectionRow
	for rows.Next() {
		var i GetSoloCollectionRow
		if err := rows.Scan(
			&i.Minprice,
			&i.ID,
			&i.ImagePath,
			&i.Name,
			&i.Firm,
			&i.Maxdiscprice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
