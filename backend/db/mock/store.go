// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mrkrabopl1/go_db/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	db "github.com/mrkrabopl1/go_db/db/sqlc"
	types "github.com/mrkrabopl1/go_db/types"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ChangePass mocks base method.
func (m *MockStore) ChangePass(arg0 context.Context, arg1, arg2 string, arg3 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePass", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePass indicates an expected call of ChangePass.
func (mr *MockStoreMockRecorder) ChangePass(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePass", reflect.TypeOf((*MockStore)(nil).ChangePass), arg0, arg1, arg2, arg3)
}

// CheckCustomerExistence mocks base method.
func (m *MockStore) CheckCustomerExistence(arg0 context.Context, arg1 db.CheckCustomerExistenceParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCustomerExistence", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCustomerExistence indicates an expected call of CheckCustomerExistence.
func (mr *MockStoreMockRecorder) CheckCustomerExistence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCustomerExistence", reflect.TypeOf((*MockStore)(nil).CheckCustomerExistence), arg0, arg1)
}

// CheckMail mocks base method.
func (m *MockStore) CheckMail(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMail", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckMail indicates an expected call of CheckMail.
func (mr *MockStoreMockRecorder) CheckMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMail", reflect.TypeOf((*MockStore)(nil).CheckMail), arg0, arg1)
}

// CreateCustomer mocks base method.
func (m *MockStore) CreateCustomer(arg0 context.Context, arg1 db.CreateCustomerParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockStoreMockRecorder) CreateCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockStore)(nil).CreateCustomer), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(arg0 context.Context, arg1 *types.CreateOrderType) (int32, int32, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), arg0, arg1)
}

// CreatePreorder mocks base method.
func (m *MockStore) CreatePreorder(arg0 context.Context, arg1 int32, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreorder", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePreorder indicates an expected call of CreatePreorder.
func (mr *MockStoreMockRecorder) CreatePreorder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreorder", reflect.TypeOf((*MockStore)(nil).CreatePreorder), arg0, arg1, arg2)
}

// CreateUniqueCustomer mocks base method.
func (m *MockStore) CreateUniqueCustomer(arg0 context.Context, arg1 pgtype.Date) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUniqueCustomer", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUniqueCustomer indicates an expected call of CreateUniqueCustomer.
func (mr *MockStoreMockRecorder) CreateUniqueCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUniqueCustomer", reflect.TypeOf((*MockStore)(nil).CreateUniqueCustomer), arg0, arg1)
}

// DeleteCartData mocks base method.
func (m *MockStore) DeleteCartData(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartData indicates an expected call of DeleteCartData.
func (mr *MockStoreMockRecorder) DeleteCartData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartData", reflect.TypeOf((*MockStore)(nil).DeleteCartData), arg0, arg1)
}

// DeleteFromVerifivation mocks base method.
func (m *MockStore) DeleteFromVerifivation(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromVerifivation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromVerifivation indicates an expected call of DeleteFromVerifivation.
func (mr *MockStoreMockRecorder) DeleteFromVerifivation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromVerifivation", reflect.TypeOf((*MockStore)(nil).DeleteFromVerifivation), arg0, arg1)
}

// DeleteVerification mocks base method.
func (m *MockStore) DeleteVerification(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVerification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVerification indicates an expected call of DeleteVerification.
func (mr *MockStoreMockRecorder) DeleteVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVerification", reflect.TypeOf((*MockStore)(nil).DeleteVerification), arg0, arg1)
}

// GetBaseCustomerData mocks base method.
func (m *MockStore) GetBaseCustomerData(arg0 context.Context, arg1 string) (db.GetBaseCustomerDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseCustomerData", arg0, arg1)
	ret0, _ := ret[0].(db.GetBaseCustomerDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseCustomerData indicates an expected call of GetBaseCustomerData.
func (mr *MockStoreMockRecorder) GetBaseCustomerData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseCustomerData", reflect.TypeOf((*MockStore)(nil).GetBaseCustomerData), arg0, arg1)
}

// GetCartCount mocks base method.
func (m *MockStore) GetCartCount(arg0 context.Context, arg1 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartCount", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartCount indicates an expected call of GetCartCount.
func (mr *MockStoreMockRecorder) GetCartCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartCount", reflect.TypeOf((*MockStore)(nil).GetCartCount), arg0, arg1)
}

// GetCartData mocks base method.
func (m *MockStore) GetCartData(arg0 context.Context, arg1 string) ([]types.SnickersCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartData", arg0, arg1)
	ret0, _ := ret[0].([]types.SnickersCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartData indicates an expected call of GetCartData.
func (mr *MockStoreMockRecorder) GetCartData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartData", reflect.TypeOf((*MockStore)(nil).GetCartData), arg0, arg1)
}

// GetCartDataFromOrderByHash mocks base method.
func (m *MockStore) GetCartDataFromOrderByHash(arg0 context.Context, arg1 string) ([]types.SnickersCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartDataFromOrderByHash", arg0, arg1)
	ret0, _ := ret[0].([]types.SnickersCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartDataFromOrderByHash indicates an expected call of GetCartDataFromOrderByHash.
func (mr *MockStoreMockRecorder) GetCartDataFromOrderByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartDataFromOrderByHash", reflect.TypeOf((*MockStore)(nil).GetCartDataFromOrderByHash), arg0, arg1)
}

// GetCartDataFromOrderById mocks base method.
func (m *MockStore) GetCartDataFromOrderById(arg0 context.Context, arg1 int32) ([]types.SnickersCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartDataFromOrderById", arg0, arg1)
	ret0, _ := ret[0].([]types.SnickersCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartDataFromOrderById indicates an expected call of GetCartDataFromOrderById.
func (mr *MockStoreMockRecorder) GetCartDataFromOrderById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartDataFromOrderById", reflect.TypeOf((*MockStore)(nil).GetCartDataFromOrderById), arg0, arg1)
}

// GetCointIdByName mocks base method.
func (m *MockStore) GetCointIdByName(arg0 context.Context, arg1 string) ([]db.GetCointIdByNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCointIdByName", arg0, arg1)
	ret0, _ := ret[0].([]db.GetCointIdByNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCointIdByName indicates an expected call of GetCointIdByName.
func (mr *MockStoreMockRecorder) GetCointIdByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCointIdByName", reflect.TypeOf((*MockStore)(nil).GetCointIdByName), arg0, arg1)
}

// GetCollections1 mocks base method.
func (m *MockStore) GetCollections1(arg0 context.Context, arg1 []string, arg2, arg3 int) (map[string][]types.SnickersSearchResponse1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollections1", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[string][]types.SnickersSearchResponse1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollections1 indicates an expected call of GetCollections1.
func (mr *MockStoreMockRecorder) GetCollections1(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollections1", reflect.TypeOf((*MockStore)(nil).GetCollections1), arg0, arg1, arg2, arg3)
}

// GetCountIdByFiltersAndFirm mocks base method.
func (m *MockStore) GetCountIdByFiltersAndFirm(arg0 context.Context, arg1 string, arg2 types.SnickersFilterStruct) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountIdByFiltersAndFirm", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountIdByFiltersAndFirm indicates an expected call of GetCountIdByFiltersAndFirm.
func (mr *MockStoreMockRecorder) GetCountIdByFiltersAndFirm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountIdByFiltersAndFirm", reflect.TypeOf((*MockStore)(nil).GetCountIdByFiltersAndFirm), arg0, arg1, arg2)
}

// GetCustomerData mocks base method.
func (m *MockStore) GetCustomerData(arg0 context.Context, arg1 int32) (db.GetCustomerDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerData", arg0, arg1)
	ret0, _ := ret[0].(db.GetCustomerDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerData indicates an expected call of GetCustomerData.
func (mr *MockStoreMockRecorder) GetCustomerData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerData", reflect.TypeOf((*MockStore)(nil).GetCustomerData), arg0, arg1)
}

// GetCustomerId mocks base method.
func (m *MockStore) GetCustomerId(arg0 context.Context, arg1 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerId", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerId indicates an expected call of GetCustomerId.
func (mr *MockStoreMockRecorder) GetCustomerId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerId", reflect.TypeOf((*MockStore)(nil).GetCustomerId), arg0, arg1)
}

// GetFiltersByString mocks base method.
func (m *MockStore) GetFiltersByString(arg0 context.Context, arg1 string) (db.GetFiltersByStringRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiltersByString", arg0, arg1)
	ret0, _ := ret[0].(db.GetFiltersByStringRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiltersByString indicates an expected call of GetFiltersByString.
func (mr *MockStoreMockRecorder) GetFiltersByString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiltersByString", reflect.TypeOf((*MockStore)(nil).GetFiltersByString), arg0, arg1)
}

// GetFirms mocks base method.
func (m *MockStore) GetFirms(arg0 context.Context) ([]db.GetFirmsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirms", arg0)
	ret0, _ := ret[0].([]db.GetFirmsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirms indicates an expected call of GetFirms.
func (mr *MockStoreMockRecorder) GetFirms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirms", reflect.TypeOf((*MockStore)(nil).GetFirms), arg0)
}

// GetFullPreorderCount mocks base method.
func (m *MockStore) GetFullPreorderCount(arg0 context.Context, arg1 int32) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullPreorderCount", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullPreorderCount indicates an expected call of GetFullPreorderCount.
func (mr *MockStoreMockRecorder) GetFullPreorderCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullPreorderCount", reflect.TypeOf((*MockStore)(nil).GetFullPreorderCount), arg0, arg1)
}

// GetOrder mocks base method.
func (m *MockStore) GetOrder(arg0 context.Context, arg1 string) (db.GetOrderRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(db.GetOrderRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStoreMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStore)(nil).GetOrder), arg0, arg1)
}

// GetOrderById mocks base method.
func (m *MockStore) GetOrderById(arg0 context.Context, arg1 int32) (db.GetOrderByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", arg0, arg1)
	ret0, _ := ret[0].(db.GetOrderByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockStoreMockRecorder) GetOrderById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockStore)(nil).GetOrderById), arg0, arg1)
}

// GetOrderData mocks base method.
func (m *MockStore) GetOrderData(arg0 context.Context, arg1 string) (db.GetOrderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderData", arg0, arg1)
	ret0, _ := ret[0].(db.GetOrderData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderData indicates an expected call of GetOrderData.
func (mr *MockStoreMockRecorder) GetOrderData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderData", reflect.TypeOf((*MockStore)(nil).GetOrderData), arg0, arg1)
}

// GetOrderDataById mocks base method.
func (m *MockStore) GetOrderDataById(arg0 context.Context, arg1 pgtype.Int4) ([]db.GetOrderDataByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDataById", arg0, arg1)
	ret0, _ := ret[0].([]db.GetOrderDataByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDataById indicates an expected call of GetOrderDataById.
func (mr *MockStoreMockRecorder) GetOrderDataById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDataById", reflect.TypeOf((*MockStore)(nil).GetOrderDataById), arg0, arg1)
}

// GetOrderDataByMail mocks base method.
func (m *MockStore) GetOrderDataByMail(arg0 context.Context, arg1 string, arg2 int32) (db.OrderDataResp, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDataByMail", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.OrderDataResp)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrderDataByMail indicates an expected call of GetOrderDataByMail.
func (mr *MockStoreMockRecorder) GetOrderDataByMail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDataByMail", reflect.TypeOf((*MockStore)(nil).GetOrderDataByMail), arg0, arg1, arg2)
}

// GetOrderIdByHashUrl mocks base method.
func (m *MockStore) GetOrderIdByHashUrl(arg0 context.Context, arg1 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderIdByHashUrl", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderIdByHashUrl indicates an expected call of GetOrderIdByHashUrl.
func (mr *MockStoreMockRecorder) GetOrderIdByHashUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderIdByHashUrl", reflect.TypeOf((*MockStore)(nil).GetOrderIdByHashUrl), arg0, arg1)
}

// GetOrderedSnickersByFilters mocks base method.
func (m *MockStore) GetOrderedSnickersByFilters(arg0 context.Context, arg1 string, arg2 types.SnickersFilterStruct, arg3, arg4, arg5 int) ([]types.SnickersSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderedSnickersByFilters", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]types.SnickersSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderedSnickersByFilters indicates an expected call of GetOrderedSnickersByFilters.
func (mr *MockStoreMockRecorder) GetOrderedSnickersByFilters(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderedSnickersByFilters", reflect.TypeOf((*MockStore)(nil).GetOrderedSnickersByFilters), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetPassword mocks base method.
func (m *MockStore) GetPassword(arg0 context.Context, arg1 int32) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockStoreMockRecorder) GetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockStore)(nil).GetPassword), arg0, arg1)
}

// GetPreorderDataById mocks base method.
func (m *MockStore) GetPreorderDataById(arg0 context.Context, arg1 int32) ([]db.GetPreorderDataByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreorderDataById", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPreorderDataByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreorderDataById indicates an expected call of GetPreorderDataById.
func (mr *MockStoreMockRecorder) GetPreorderDataById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreorderDataById", reflect.TypeOf((*MockStore)(nil).GetPreorderDataById), arg0, arg1)
}

// GetPreorderIdByHashUrl mocks base method.
func (m *MockStore) GetPreorderIdByHashUrl(arg0 context.Context, arg1 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreorderIdByHashUrl", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreorderIdByHashUrl indicates an expected call of GetPreorderIdByHashUrl.
func (mr *MockStoreMockRecorder) GetPreorderIdByHashUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreorderIdByHashUrl", reflect.TypeOf((*MockStore)(nil).GetPreorderIdByHashUrl), arg0, arg1)
}

// GetSnickersAndFiltersByString mocks base method.
func (m *MockStore) GetSnickersAndFiltersByString(arg0 context.Context, arg1 string, arg2, arg3 int, arg4 types.SnickersFilterStruct, arg5 int) (db.RespSearchSnickersAndFiltersByString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnickersAndFiltersByString", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(db.RespSearchSnickersAndFiltersByString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnickersAndFiltersByString indicates an expected call of GetSnickersAndFiltersByString.
func (mr *MockStoreMockRecorder) GetSnickersAndFiltersByString(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnickersAndFiltersByString", reflect.TypeOf((*MockStore)(nil).GetSnickersAndFiltersByString), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetSnickersByFirmName mocks base method.
func (m *MockStore) GetSnickersByFirmName(arg0 context.Context, arg1 string) ([]db.GetSnickersByFirmNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnickersByFirmName", arg0, arg1)
	ret0, _ := ret[0].([]db.GetSnickersByFirmNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnickersByFirmName indicates an expected call of GetSnickersByFirmName.
func (mr *MockStoreMockRecorder) GetSnickersByFirmName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnickersByFirmName", reflect.TypeOf((*MockStore)(nil).GetSnickersByFirmName), arg0, arg1)
}

// GetSnickersByIds mocks base method.
func (m *MockStore) GetSnickersByIds(arg0 context.Context, arg1 []interface{}) ([]db.GetSnickersByIdsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnickersByIds", arg0, arg1)
	ret0, _ := ret[0].([]db.GetSnickersByIdsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnickersByIds indicates an expected call of GetSnickersByIds.
func (mr *MockStoreMockRecorder) GetSnickersByIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnickersByIds", reflect.TypeOf((*MockStore)(nil).GetSnickersByIds), arg0, arg1)
}

// GetSnickersByLineName mocks base method.
func (m *MockStore) GetSnickersByLineName(arg0 context.Context, arg1 string) ([]db.GetSnickersByLineNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnickersByLineName", arg0, arg1)
	ret0, _ := ret[0].([]db.GetSnickersByLineNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnickersByLineName indicates an expected call of GetSnickersByLineName.
func (mr *MockStoreMockRecorder) GetSnickersByLineName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnickersByLineName", reflect.TypeOf((*MockStore)(nil).GetSnickersByLineName), arg0, arg1)
}

// GetSnickersByName mocks base method.
func (m *MockStore) GetSnickersByName(arg0 context.Context, arg1 db.GetSnickersByNameParams) ([]db.GetSnickersByNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnickersByName", arg0, arg1)
	ret0, _ := ret[0].([]db.GetSnickersByNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnickersByName indicates an expected call of GetSnickersByName.
func (mr *MockStoreMockRecorder) GetSnickersByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnickersByName", reflect.TypeOf((*MockStore)(nil).GetSnickersByName), arg0, arg1)
}

// GetSnickersByNameComplex mocks base method.
func (m *MockStore) GetSnickersByNameComplex(arg0 context.Context, arg1 string, arg2 int32) ([]types.SnickersSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnickersByNameComplex", arg0, arg1, arg2)
	ret0, _ := ret[0].([]types.SnickersSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnickersByNameComplex indicates an expected call of GetSnickersByNameComplex.
func (mr *MockStoreMockRecorder) GetSnickersByNameComplex(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnickersByNameComplex", reflect.TypeOf((*MockStore)(nil).GetSnickersByNameComplex), arg0, arg1, arg2)
}

// GetSnickersByString mocks base method.
func (m *MockStore) GetSnickersByString(arg0 context.Context, arg1 string, arg2, arg3 int, arg4 types.SnickersFilterStruct, arg5 int) (db.RespSearchSnickersByString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnickersByString", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(db.RespSearchSnickersByString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnickersByString indicates an expected call of GetSnickersByString.
func (mr *MockStoreMockRecorder) GetSnickersByString(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnickersByString", reflect.TypeOf((*MockStore)(nil).GetSnickersByString), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetSnickersHistoryComplex mocks base method.
func (m *MockStore) GetSnickersHistoryComplex(arg0 context.Context, arg1 int32) ([]types.SnickersSearchResponse1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnickersHistoryComplex", arg0, arg1)
	ret0, _ := ret[0].([]types.SnickersSearchResponse1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnickersHistoryComplex indicates an expected call of GetSnickersHistoryComplex.
func (mr *MockStoreMockRecorder) GetSnickersHistoryComplex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnickersHistoryComplex", reflect.TypeOf((*MockStore)(nil).GetSnickersHistoryComplex), arg0, arg1)
}

// GetSnickersInfoById mocks base method.
func (m *MockStore) GetSnickersInfoById(arg0 context.Context, arg1 int32) (db.GetSnickersInfoByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnickersInfoById", arg0, arg1)
	ret0, _ := ret[0].(db.GetSnickersInfoByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnickersInfoById indicates an expected call of GetSnickersInfoById.
func (mr *MockStoreMockRecorder) GetSnickersInfoById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnickersInfoById", reflect.TypeOf((*MockStore)(nil).GetSnickersInfoById), arg0, arg1)
}

// GetSnickersInfoByIdComplex mocks base method.
func (m *MockStore) GetSnickersInfoByIdComplex(arg0 context.Context, arg1 int32) (db.SnickersInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnickersInfoByIdComplex", arg0, arg1)
	ret0, _ := ret[0].(db.SnickersInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnickersInfoByIdComplex indicates an expected call of GetSnickersInfoByIdComplex.
func (mr *MockStoreMockRecorder) GetSnickersInfoByIdComplex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnickersInfoByIdComplex", reflect.TypeOf((*MockStore)(nil).GetSnickersInfoByIdComplex), arg0, arg1)
}

// GetSnickersOrderData mocks base method.
func (m *MockStore) GetSnickersOrderData(arg0 context.Context, arg1 []db.GetOrderDataByIdRow) ([]types.SnickersCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnickersOrderData", arg0, arg1)
	ret0, _ := ret[0].([]types.SnickersCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnickersOrderData indicates an expected call of GetSnickersOrderData.
func (mr *MockStoreMockRecorder) GetSnickersOrderData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnickersOrderData", reflect.TypeOf((*MockStore)(nil).GetSnickersOrderData), arg0, arg1)
}

// GetSnickersWithDiscount mocks base method.
func (m *MockStore) GetSnickersWithDiscount(arg0 context.Context) ([]db.GetSnickersWithDiscountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnickersWithDiscount", arg0)
	ret0, _ := ret[0].([]db.GetSnickersWithDiscountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnickersWithDiscount indicates an expected call of GetSnickersWithDiscount.
func (mr *MockStoreMockRecorder) GetSnickersWithDiscount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnickersWithDiscount", reflect.TypeOf((*MockStore)(nil).GetSnickersWithDiscount), arg0)
}

// GetSnickersWithDiscountComplex mocks base method.
func (m *MockStore) GetSnickersWithDiscountComplex(arg0 context.Context) ([]types.SnickersSearchResponse1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnickersWithDiscountComplex", arg0)
	ret0, _ := ret[0].([]types.SnickersSearchResponse1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnickersWithDiscountComplex indicates an expected call of GetSnickersWithDiscountComplex.
func (mr *MockStoreMockRecorder) GetSnickersWithDiscountComplex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnickersWithDiscountComplex", reflect.TypeOf((*MockStore)(nil).GetSnickersWithDiscountComplex), arg0)
}

// GetSoloCollection mocks base method.
func (m *MockStore) GetSoloCollection(arg0 context.Context, arg1 db.GetSoloCollectionParams) ([]db.GetSoloCollectionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSoloCollection", arg0, arg1)
	ret0, _ := ret[0].([]db.GetSoloCollectionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSoloCollection indicates an expected call of GetSoloCollection.
func (mr *MockStoreMockRecorder) GetSoloCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoloCollection", reflect.TypeOf((*MockStore)(nil).GetSoloCollection), arg0, arg1)
}

// GetSoloCollectionComplex mocks base method.
func (m *MockStore) GetSoloCollectionComplex(arg0 context.Context, arg1 db.GetSoloCollectionParams) ([]types.SnickersSearchResponse1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSoloCollectionComplex", arg0, arg1)
	ret0, _ := ret[0].([]types.SnickersSearchResponse1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSoloCollectionComplex indicates an expected call of GetSoloCollectionComplex.
func (mr *MockStoreMockRecorder) GetSoloCollectionComplex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoloCollectionComplex", reflect.TypeOf((*MockStore)(nil).GetSoloCollectionComplex), arg0, arg1)
}

// GetUnregisterCustomer mocks base method.
func (m *MockStore) GetUnregisterCustomer(arg0 context.Context, arg1 int32) (db.GetUnregisterCustomerRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnregisterCustomer", arg0, arg1)
	ret0, _ := ret[0].(db.GetUnregisterCustomerRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnregisterCustomer indicates an expected call of GetUnregisterCustomer.
func (mr *MockStoreMockRecorder) GetUnregisterCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnregisterCustomer", reflect.TypeOf((*MockStore)(nil).GetUnregisterCustomer), arg0, arg1)
}

// GetVerification mocks base method.
func (m *MockStore) GetVerification(arg0 context.Context, arg1 string) (db.GetVerificationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerification", arg0, arg1)
	ret0, _ := ret[0].(db.GetVerificationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerification indicates an expected call of GetVerification.
func (mr *MockStoreMockRecorder) GetVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerification", reflect.TypeOf((*MockStore)(nil).GetVerification), arg0, arg1)
}

// InsertOrder mocks base method.
func (m *MockStore) InsertOrder(arg0 context.Context, arg1 db.InsertOrderParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrder indicates an expected call of InsertOrder.
func (mr *MockStoreMockRecorder) InsertOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockStore)(nil).InsertOrder), arg0, arg1)
}

// InsertOrderItems mocks base method.
func (m *MockStore) InsertOrderItems(arg0 context.Context, arg1 db.InsertOrderItemsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrderItems", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrderItems indicates an expected call of InsertOrderItems.
func (mr *MockStoreMockRecorder) InsertOrderItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrderItems", reflect.TypeOf((*MockStore)(nil).InsertOrderItems), arg0, arg1)
}

// InsertPreorder mocks base method.
func (m *MockStore) InsertPreorder(arg0 context.Context, arg1 db.InsertPreorderParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPreorder", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPreorder indicates an expected call of InsertPreorder.
func (mr *MockStoreMockRecorder) InsertPreorder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPreorder", reflect.TypeOf((*MockStore)(nil).InsertPreorder), arg0, arg1)
}

// InsertPreorderItems mocks base method.
func (m *MockStore) InsertPreorderItems(arg0 context.Context, arg1 db.InsertPreorderItemsParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPreorderItems", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPreorderItems indicates an expected call of InsertPreorderItems.
func (mr *MockStoreMockRecorder) InsertPreorderItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPreorderItems", reflect.TypeOf((*MockStore)(nil).InsertPreorderItems), arg0, arg1)
}

// InsertVerification mocks base method.
func (m *MockStore) InsertVerification(arg0 context.Context, arg1 db.InsertVerificationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVerification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertVerification indicates an expected call of InsertVerification.
func (mr *MockStoreMockRecorder) InsertVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVerification", reflect.TypeOf((*MockStore)(nil).InsertVerification), arg0, arg1)
}

// RegisterUser mocks base method.
func (m *MockStore) RegisterUser(arg0 context.Context, arg1, arg2 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockStoreMockRecorder) RegisterUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockStore)(nil).RegisterUser), arg0, arg1, arg2)
}

// SelectHistoryFromUniqueCustomer mocks base method.
func (m *MockStore) SelectHistoryFromUniqueCustomer(arg0 context.Context, arg1 int32) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectHistoryFromUniqueCustomer", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectHistoryFromUniqueCustomer indicates an expected call of SelectHistoryFromUniqueCustomer.
func (mr *MockStoreMockRecorder) SelectHistoryFromUniqueCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectHistoryFromUniqueCustomer", reflect.TypeOf((*MockStore)(nil).SelectHistoryFromUniqueCustomer), arg0, arg1)
}

// SelectQuantityFromPreorderItems mocks base method.
func (m *MockStore) SelectQuantityFromPreorderItems(arg0 context.Context, arg1 db.SelectQuantityFromPreorderItemsParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectQuantityFromPreorderItems", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectQuantityFromPreorderItems indicates an expected call of SelectQuantityFromPreorderItems.
func (mr *MockStoreMockRecorder) SelectQuantityFromPreorderItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectQuantityFromPreorderItems", reflect.TypeOf((*MockStore)(nil).SelectQuantityFromPreorderItems), arg0, arg1)
}

// SetSnickersHistory mocks base method.
func (m *MockStore) SetSnickersHistory(arg0 context.Context, arg1, arg2 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSnickersHistory", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSnickersHistory indicates an expected call of SetSnickersHistory.
func (mr *MockStoreMockRecorder) SetSnickersHistory(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnickersHistory", reflect.TypeOf((*MockStore)(nil).SetSnickersHistory), arg0, arg1, arg2)
}

// SetUnregisterCustomer mocks base method.
func (m *MockStore) SetUnregisterCustomer(arg0 context.Context, arg1 db.SetUnregisterCustomerParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnregisterCustomer", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUnregisterCustomer indicates an expected call of SetUnregisterCustomer.
func (mr *MockStoreMockRecorder) SetUnregisterCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnregisterCustomer", reflect.TypeOf((*MockStore)(nil).SetUnregisterCustomer), arg0, arg1)
}

// UpdateCustomerPass mocks base method.
func (m *MockStore) UpdateCustomerPass(arg0 context.Context, arg1 db.UpdateCustomerPassParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerPass", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomerPass indicates an expected call of UpdateCustomerPass.
func (mr *MockStoreMockRecorder) UpdateCustomerPass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerPass", reflect.TypeOf((*MockStore)(nil).UpdateCustomerPass), arg0, arg1)
}

// UpdateForgetPass mocks base method.
func (m *MockStore) UpdateForgetPass(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateForgetPass", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateForgetPass indicates an expected call of UpdateForgetPass.
func (mr *MockStoreMockRecorder) UpdateForgetPass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForgetPass", reflect.TypeOf((*MockStore)(nil).UpdateForgetPass), arg0, arg1)
}

// UpdatePreorder mocks base method.
func (m *MockStore) UpdatePreorder(arg0 context.Context, arg1 int32, arg2, arg3 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreorder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePreorder indicates an expected call of UpdatePreorder.
func (mr *MockStoreMockRecorder) UpdatePreorder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreorder", reflect.TypeOf((*MockStore)(nil).UpdatePreorder), arg0, arg1, arg2, arg3)
}

// UpdatePreorderItems mocks base method.
func (m *MockStore) UpdatePreorderItems(arg0 context.Context, arg1 db.UpdatePreorderItemsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreorderItems", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePreorderItems indicates an expected call of UpdatePreorderItems.
func (mr *MockStoreMockRecorder) UpdatePreorderItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreorderItems", reflect.TypeOf((*MockStore)(nil).UpdatePreorderItems), arg0, arg1)
}

// UpdateUniqueCustomerHistry mocks base method.
func (m *MockStore) UpdateUniqueCustomerHistry(arg0 context.Context, arg1 db.UpdateUniqueCustomerHistryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUniqueCustomerHistry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUniqueCustomerHistry indicates an expected call of UpdateUniqueCustomerHistry.
func (mr *MockStoreMockRecorder) UpdateUniqueCustomerHistry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUniqueCustomerHistry", reflect.TypeOf((*MockStore)(nil).UpdateUniqueCustomerHistry), arg0, arg1)
}

// VerifyUser mocks base method.
func (m *MockStore) VerifyUser(arg0 context.Context, arg1 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockStoreMockRecorder) VerifyUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockStore)(nil).VerifyUser), arg0, arg1)
}
