// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mrkrabopl1/go_db/db/sqlc (interfaces: Store)

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/mrkrabopl1/go_db/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetFirms mocks base method.
func (m *MockStore) GetFirms(arg0 context.Context) ([]db.GetFirmsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirms", arg0)
	ret0, _ := ret[0].([]db.GetFirmsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirms indicates an expected call of GetFirms.
func (mr *MockStoreMockRecorder) GetFirms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirms", reflect.TypeOf((*MockStore)(nil).GetFirms), arg0)
}
